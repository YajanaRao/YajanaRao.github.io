{"componentChunkName":"component---src-templates-blog-post-js","path":"/c-programming/strings-and-character-array/","result":{"data":{"site":{"siteMetadata":{"title":"Yajana Rao"}},"markdownRemark":{"id":"a5da5f9d-80ac-5431-9c30-9578ad947fad","excerpt":"String is a sequence of characters terminated by null character ‘\\0’ Memory allocation String is not a data type in C A string is one-dimensional array of…","html":"<p>String is a sequence of characters terminated by null character ‘\\0’</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c string\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Memory allocation</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token url\">[<span class=\"token content\">c</span>][<span class=\"token variable\"> </span>]</span>[s]<span class=\"token url\">[<span class=\"token content\">t</span>][<span class=\"token variable\">r</span>]</span>[i]<span class=\"token url\">[<span class=\"token content\">n</span>][<span class=\"token variable\">g</span>]</span>[\\0]</code></pre></div>\n<ul>\n<li>String is not a data type in C</li>\n<li>A string is one-dimensional array of characters</li>\n</ul>\n<h2>Declaring string variables</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Initializing a string variables</h2>\n<p>There are different ways to initialize a character array variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"StudyTonight\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// valid character array initialization</span>\n\n<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// valid initialization</span>\n\n<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c string\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Valid initialization</span>\n\n<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hell\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Illegal</span></code></pre></div>\n<h2>Assigning Values to Strings</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">\"hell\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Illegal</span></code></pre></div>\n<blockquote>\n<p>The strcpy() function can be used to copy the string instead.</p>\n</blockquote>\n<h2>String Input and Output</h2>\n<p>Input function scanf() and gets() can be used with %s format specifier to read a string input from the terminal.</p>\n<ul>\n<li><code class=\"language-text\">scanf()</code> terminates its input on the first white space it encounters.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> text<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// using gets</span>\n    <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// using scanf</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a string: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%[^\\n]\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//scanning the whole string, including the white spaces</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>String Handling Functions</h2>\n<p>C supports a large number of string handling functions in the standard library “string.h”</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>strcat()</td>\n<td>concatenate(combine) two strings</td>\n</tr>\n<tr>\n<td>strlen()</td>\n<td>returns length of a string</td>\n</tr>\n<tr>\n<td>strrev()</td>\n<td>reverse of a string</td>\n</tr>\n<tr>\n<td>strcpy()</td>\n<td>Copies one string into another</td>\n</tr>\n<tr>\n<td>strcmp()</td>\n<td>compare two string</td>\n</tr>\n</tbody>\n</table>\n<h2>Passing strings to functions</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">displayString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter string: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">displayString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Passing string to function.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">displayString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"String Output: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Strings and Character array","date":null,"description":null}}},"pageContext":{"slug":"/c-programming/strings-and-character-array/","previous":{"fields":{"slug":"/c-programming/unions-and-struct/"},"frontmatter":{"title":"Structure and Unions"}},"next":{"fields":{"slug":"/c-programming/pointers/"},"frontmatter":{"title":"C Pointers"}}}},"staticQueryHashes":["1205699325","1246554614","2841359383","3336116537"]}