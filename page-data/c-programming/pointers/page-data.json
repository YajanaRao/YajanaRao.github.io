{"componentChunkName":"component---src-templates-blog-post-js","path":"/c-programming/pointers/","result":{"data":{"site":{"siteMetadata":{"title":"Yajana Rao"}},"markdownRemark":{"id":"5ade84d2-4583-5e3f-86b0-b30d0d357c57","excerpt":"Pointers (pointer variables) are used to store addresses rather than values. Address in C  gives the address of the variable in memory You will probably get a…","html":"<p>Pointers (pointer variables) are used to store addresses rather than values.</p>\n<h2>Address in C</h2>\n<p><code class=\"language-text\">&amp;</code> gives the address of the variable in memory</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> var <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var: %d\\n\"</span><span class=\"token punctuation\">,</span> var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Notice the use of &amp; before var</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address of var: %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>You will probably get a different address when you run the above code.</p>\n</blockquote>\n<h2>Declaration</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>A pointer points to either no address or a random address. where as, A variable has an address but contains random garbage value.</p>\n<h2>Assigning addresses to Pointers</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">int* pc, c;\nc = 5;\npc = &amp;c;</code></pre></div>\n<h2>Get Value of stored in Pointers</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\npc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Output: 5</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">*</code> is called the dereference operator (when working with pointers). It operates on a pointer and gives the value stored in that pointer.</p>\n</blockquote>\n<h2>Changing Value Pointed by Pointers</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\npc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Output: 1</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ouptut: 1</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\npc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Output: 1</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Output: 1</span></code></pre></div>\n<h2>Pointer arithmetic</h2>\n<ol>\n<li>Incrementing a Pointer</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>Decrementing a Pointer</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ptr<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Pointer to array</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Variable p of type pointer is pointing to the address of an integer array arr.</span></code></pre></div>\n<h2>Pointer to a function</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">displayValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Pointer p is pointing to the address of a function</span>\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>displayValue<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// void(*p)(int) = displayValue;</span>\n<span class=\"token comment\">// returnType (*variableName)(parameters) = &amp;functionName</span></code></pre></div>\n<blockquote>\n<p>Unlike normal pointers, a function pointer points to code, not data. Typically a function pointer stores the start of executable code.\nUnlike normal pointers, we do not allocate de-allocate memory using function pointers.\nA function’s name can also be used to get functions’ address.</p>\n</blockquote>\n<h2>Pointer to Pointer</h2>\n<p>Pointer contains the address of another pointer</p>\n<h2>NULL Pointers</h2>\n<p>A pointer that is assigned NULL is called a null pointer.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">int</span>  <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of ptr is : %x\\n\"</span><span class=\"token punctuation\">,</span> ptr  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Void Pointer</h2>\n<p>The void pointer in C is a pointer which is not associated with any data types</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>Pointer arithmetic is not possible with void pointer due to its concrete size.</li>\n<li>It can’t be used as dereferenced.</li>\n</ol>\n<h2>Near pointer</h2>\n<p>Used to store 16 bit addresses.</p>\n<p>The limitation is that we can only access 64kb of data at a time.</p>\n<h2>Far pointer</h2>\n<p>Used to store 32 bit addresses.</p>\n<h2>Dangling Pointers</h2>\n<p>A pointer pointing to a memory location that has been deleted (or freed) is called dangling pointer.</p>\n<ol>\n<li>De-allocation of memory</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// No ptr is a dangling pointer</span>\n\n\t<span class=\"token comment\">// No more a dangling pointer</span>\n\tptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>Variable goes out of scope</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span>\n       ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token comment\">// Here ptr is dangling pointer</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Advantage of pointer</h2>\n<ol>\n<li>Pointer reduces the code and improves the performance</li>\n<li>We can return multiple values from a function using the pointer.</li>\n<li>It makes you able to access any memory location in the computer’s memory.</li>\n</ol>\n<h2>Usage of pointer</h2>\n<p>There are many applications of pointers in c language.</p>\n<ol>\n<li>Dynamic memory allocation using malloc() and calloc() functions.</li>\n<li>Arrays, Functions, and Structures</li>\n</ol>\n<h2>Dynamic memory allocation</h2>\n<p>The concept of dynamic memory allocation in c language enables the C programmer to allocate memory at runtime.</p>\n<blockquote>\n<p>4 functions of stdlib.h header file.</p>\n</blockquote>\n<ol>\n<li>malloc()</li>\n<li>calloc()</li>\n<li>realloc()</li>\n<li>free()</li>\n</ol>\n<h2>malloc() function</h2>\n<p>The malloc() function allocates single block of requested memory.</p>\n<p>Initialize memory at execution time, so it has garbage value initially.</p>\n<p>It returns NULL if memory is not sufficient.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ptr<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>cast<span class=\"token operator\">-</span>type<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>byte<span class=\"token operator\">-</span>size<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>calloc() function</h2>\n<p>The calloc() function allocates multiple block of requested memory.</p>\n<p>It initially initialize all bytes to zero.</p>\n<p>It returns NULL if memory is not sufficient.</p>\n<p>The syntax of calloc() function is given below:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ptr<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>cast<span class=\"token operator\">-</span>type<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> byte<span class=\"token operator\">-</span>size<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Deference between <code class=\"language-text\">malloc()</code> and <code class=\"language-text\">calloc()</code></h2>\n<p><strong>Initialization</strong>:\nmalloc() - doesn’t clear and initialize the allocated memory.\ncalloc() - initializes the allocated memory by zero.</p>\n<p><strong>Speed</strong>:\nmalloc() is fast.\ncalloc() is slower than malloc().</p>\n<p><strong>Arguments &#x26; Syntax</strong>:\nmalloc() takes 1 argument</p>\n<ol>\n<li>The number of bytes to be allocated</li>\n</ol>\n<p>calloc() takes 2 arguments:</p>\n<ol>\n<li>length\nthe number of blocks of memory to be allocated</li>\n<li>bytes\nthe number of bytes to be allocated at each block of memory</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">   <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> length<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Meaning on name</strong>:\nThe name malloc means “memory allocation”.\nThe name calloc means “contiguous allocation”.</p>","frontmatter":{"title":"C Pointers","date":null,"description":null}}},"pageContext":{"slug":"/c-programming/pointers/","previous":{"fields":{"slug":"/c-programming/strings-and-character-array/"},"frontmatter":{"title":"Strings and Character array"}},"next":{"fields":{"slug":"/c-programming/looping/"},"frontmatter":{"title":"Looping"}}}},"staticQueryHashes":["1205699325","1246554614","2841359383","3336116537"]}