{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["BlogIndex","data","location","allPosts","allMarkdownRemark","edges","siteTitle","site","siteMetadata","title","useState","query","filteredData","state","setState","style","display","type","id","name","placeholder","autoFocus","onChange","event","target","value","filter","post","node","frontmatter","tags","toLowerCase","includes","join","width","padding","borderRadius","boxSizing","border","map","fields","slug","key","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"2FAAA,0HAoFeA,UA7EG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAWF,EAAKG,kBAAkBC,MAClCC,EAAYL,EAAKM,KAAKC,aAAaC,MAFD,EAIdC,mBAAS,CACjCC,MAAO,GACPC,aAAcT,IAFTU,EAJiC,KAI1BC,EAJ0B,KAShCF,EAAiBC,EAAjBD,aAkBR,OACE,kBAAC,IAAD,CAAQV,SAAUA,EAAUO,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,yBAAKM,MAAO,CAAEC,QAAS,SACrB,2BACEC,KAAK,OACLC,GAAG,SACHC,KAAK,eACLC,YAAY,eACZC,WAAS,EACTC,SA1Ba,SAACC,GACpB,IAAMZ,EAAQY,EAAMC,OAAOC,MACrBb,EAAeT,EAASuB,QAAO,SAACC,GAAU,IAAD,EACrBA,EAAKC,KAAKC,YAA1BpB,EADqC,EACrCA,MAAOqB,EAD8B,EAC9BA,KAEf,OACErB,EAAMsB,cAAcC,SAASrB,EAAMoB,gBAClCD,GAAQA,EAAKG,KAAK,IAAIF,cAAcC,SAASrB,EAAMoB,kBAGxDjB,EAAS,CACPH,QACAC,kBAeIG,MAAO,CACLmB,MAAO,OACPC,QAAS,WACTC,aAAc,MACdC,UAAW,aACXC,OAAQ,qBAIb1B,EAAa2B,KAAI,YAAe,IAAZX,EAAW,EAAXA,KACbnB,EAAQmB,EAAKC,YAAYpB,OAASmB,EAAKY,OAAOC,KACpD,OACE,6BAASC,IAAKd,EAAKY,OAAOC,MACxB,gCACE,wBACE1B,MAAO,CACL4B,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAM7B,MAAO,CAAE8B,UAAU,QAAWC,GAAIlB,EAAKY,OAAOC,MACjDhC,IAGL,+BAAQmB,EAAKC,YAAYkB,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQrB,EAAKC,YAAYqB,aAAetB,EAAKuB,kBAaxD,IAAMC,EAAS","file":"component---src-pages-index-js-f6b23facdfc64d968c75.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { rhythm } from \"../utils/typography\";\n\nconst BlogIndex = ({ data, location }) => {\n  const allPosts = data.allMarkdownRemark.edges;\n  const siteTitle = data.site.siteMetadata.title;\n\n  const [state, setState] = useState({\n    query: \"\",\n    filteredData: allPosts,\n  });\n\n  const { filteredData } = state;\n\n  const handleChange = (event) => {\n    const query = event.target.value;\n    const filteredData = allPosts.filter((post) => {\n      const { title, tags } = post.node.frontmatter;\n\n      return (\n        title.toLowerCase().includes(query.toLowerCase()) ||\n        (tags && tags.join(\"\").toLowerCase().includes(query.toLowerCase()))\n      );\n    });\n    setState({\n      query,\n      filteredData,\n    });\n  };\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <div style={{ display: \"flex\" }}>\n        <input\n          type=\"text\"\n          id=\"search\"\n          name=\"Search Blogs\"\n          placeholder=\"Search Blogs\"\n          autoFocus\n          onChange={handleChange}\n          style={{\n            width: \"100%\",\n            padding: \"8px 20px\",\n            borderRadius: \"4px\",\n            boxSizing: \"border-box\",\n            border: \"1px solid #ccc\",\n          }}\n        />\n      </div>\n      {filteredData.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        );\n      })}\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fileAbsolutePath: { regex: \"/blog/\" } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}